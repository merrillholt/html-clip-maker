"""HTML generation module."""

from typing import Dict, Optional
from pathlib import Path
import json
from datetime import datetime
from dataclasses import dataclass
from . import config


@dataclass
class HTMLTemplate:
    """Represents the configurable parts of the HTML template."""
    title: str
    content: str
    version: str = config.VERSION
    timestamp: str = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    fonts: Dict = None

    def __post_init__(self):
        if self.fonts is None:
            self.fonts = config.DEFAULT_FONTS


class HTMLGenerator:
    """Generates HTML documents with MathJax and syntax highlighting."""

    def __init__(self):
        self.template = self._load_base_template()

    def _load_base_template(self) -> str:
        """Load the base HTML template."""
        return '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Generated by HTML Clip Maker v{version} on {timestamp} -->
    <title>{title}</title>
    <!-- Add Google Fonts -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&family=Fira+Code&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/{highlightjs_version}/styles/default.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/{highlightjs_version}/highlight.min.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <style>
        /* Font Variables - Modify these to change fonts */
        :root {{
            --main-font: {main_font};
            --code-font: {code_font};
            --font-size: {font_size};
            --line-height: {line_height};
            --code-font-size: {code_font_size};
        }}

        /* Apply fonts */
        body {{
            font-family: var(--main-font);
            font-size: var(--font-size);
            line-height: var(--line-height);
            text-indent: 20px;
            color: #2c3e50;
        }}

        code, pre {{
            font-family: var(--code-font);
            font-size: var(--code-font-size);
        }}

        mjx-container {{
            text-align: left !important;
        }}
        mjx-container.display {{
            padding-left: 20px;
        }}
        .indent-h1, h1 {{
            margin-left: 0;
        }}
        .indent-h2, h2 {{
            margin-left: 20px;
        }}
        .indent-h3, h3 {{
            margin-left: 40px;
        }}
        .indent-h4, h4 {{
            margin-left: 60px;
        }}
        pre {{
            white-space: pre-wrap;
            background-color: #f6f8fa;
            padding: 16px;
            border-radius: 6px;
            margin: 10px 0;
        }}
        code {{
            background-color: #f6f8fa;
            padding: 0.2em 0.4em;
            border-radius: 3px;
        }}
        .content-preserve {{
            white-space: pre-wrap;
        }}
        blockquote {{
            border-left: 4px solid #ddd;
            padding-left: 16px;
            margin-left: 0;
            color: #666;
        }}
        ul, ol {{
            margin-left: 20px;
        }}
        del {{
            text-decoration: line-through;
            color: #666;
        }}
        .footer {{
            margin-top: 2em;
            padding-top: 1em;
            border-top: 1px solid #eee;
            color: #666;
            font-size: 0.8em;
        }}
    </style>

    <script>
        MathJax = {{
            tex: {{
                packages: ['base', 'ams'],
                inlineMath: [['$', '$'], ['\\\\(', '\\\\)']],
                displayMath: [['$$', '$$'], ['\\\\[', '\\\\]']],
                processEscapes: true
            }},
            svg: {{
                fontCache: 'global'
            }},
            options: {{
                renderActions: {{
                    addMenu: []
                }},
                skipHtmlTags: ["script", "style", "textarea", "pre", "code"],
                includeHtmlTags: {{br: "\\n", wbr: "", "#comment": ""}}
            }}
        }};
    </script>
    <script type="text/javascript" id="MathJax-script" async
        src="https://cdn.jsdelivr.net/npm/mathjax@{mathjax_version}/es5/tex-svg.js">
    </script>
</head>
<body>
    <div id="content">
        {content}
    </div>

    <div class="footer">
        Generated by HTML Clip Maker v{version} on {timestamp}
    </div>

    <script type="text/javascript">
        function renderMath() {{
            MathJax.typeset().then(() => {{
                document.querySelectorAll("mjx-container").forEach(container => {{
                    if (container.parentNode.tagName === "P") {{
                        container.classList.add("inline");
                    }} else {{
                        container.classList.add("display");
                    }}
                }});

                document.querySelectorAll("mjx-container.display").forEach(container => {{
                    const parent = container.parentElement;
                    if (parent && parent.tagName === "DIV" && parent.classList.contains("content-preserve")) {{
                        let indentLevel = 0;
                        let currentClass = parent.className;
                        while (currentClass.includes(`indent-h${{parseInt(currentClass.split('-')[1]) + 1}}`)) {{
                            indentLevel++;
                            currentClass = currentClass.replace(`indent-h${{parseInt(currentClass.split('-')[1]) + 1}}`, '');
                        }}
                        container.style.marginLeft = `${{indentLevel * 20}}px`;
                    }}
                }});
            }}).catch(function (err) {{
                console.error(err.message);
            }});
        }}

        document.addEventListener("DOMContentLoaded", function() {{
            renderMath();
            // Process any code blocks for syntax highlighting
            document.querySelectorAll('pre code').forEach((block) => {{
                hljs.highlightBlock(block);
            }});
        }});
    </script>
</body>
</html>
'''

    def generate(self, template_data: HTMLTemplate) -> str:
        """Generate HTML from template and data."""
        return self.template.format(
            version=template_data.version,
            timestamp=template_data.timestamp,
            title=template_data.title,
            content=template_data.content,
            highlightjs_version=config.HIGHLIGHT_JS_VERSION,
            mathjax_version=config.MATHJAX_VERSION,
            main_font=template_data.fonts['main_font'],
            code_font=template_data.fonts['code_font'],
            font_size=template_data.fonts['font_size'],
            line_height=template_data.fonts['line_height'],
            code_font_size=template_data.fonts['code_font_size']
        )

    def save(self, html: str, output_path: Path) -> None:
        """Save HTML content to file."""
        output_path.write_text(html, encoding='utf-8')

    def apply_custom_styles(self, html: str, custom_styles: Dict) -> str:
        """Apply custom CSS styles to the HTML."""
        style_block = "\n".join(f"{k} {{\n    {v}\n}}"
                                for k, v in custom_styles.items())
        return html.replace("</style>", f"\n{style_block}\n</style>")

    def wrap_content(self, content: str) -> str:
        """Wrap content in appropriate div structure."""
        lines = content.split('\n')
        wrapped_lines = []
        indent_class = "indent-h1"

        for line in lines:
            if line.startswith(('<h1', '<h2', '<h3', '<h4')):
                wrapped_lines.append(line)
            else:
                wrapped_lines.append(
                    f'<div class="{indent_class} content-preserve">{line}</div>'
                )

        return '\n'.join(wrapped_lines)